(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'clips'"
p3
sS'layer'
p4
S'/home/vishrut/web2py/applications/astra2/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(\'sqlite://storage.sqlite\')\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\')\n    ## store sessions and tickets there\n    session.connect(request, response, db = db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables()\n\n## configure email\nmail=auth.settings.mailer\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\nmail.settings.sender = \'you@gmail.com\'\nmail.settings.login = \'username:password\'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth,filename=\'private/janrain.key\')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\nfrom gluon.tools import Crud\ncrud = Crud(db)\nfrom gluon.tools import Auth\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\n\nauth.define_tables()\nauth.add_group(\'role\',\'description\')\n\ndb.define_table(\'kids\',\n                Field(\'username\',unique=True),\n                Field(\'password\',"password"),\n                Field(\'rno\',"integer",default=None),\n                format=\'%(username)s\'\n                )\n        \ndb.define_table(\'rooms\',\n                Field(\'rnum\',\'integer\',unique=True),\n                Field(\'vidurl\'),\n                Field(\'active\',\'boolean\'),\n                Field(\'framenum\',\'integer\'),\n                Field(\'img\',db.clips),\n                format=\'%(rnum)s\'\n                )\n                \ndb.define_table(\'clips\',\n                Field(\'title\',unique=True),\n                Field(\'file\',\'upload\'),\n                format=\'%(title)s\')\n\n\ndb.kids.username.writable=True\ndb.kids.password.writable=False\ndb.kids.password.readable=False\ndb.kids.rno.writable=False\ndb.kids.rno.readable=False\ndb.kids.username.requires = IS_NOT_IN_DB(db, db.kids.username)\ndb.kids.username.requires=IS_NOT_EMPTY()\ndb.rooms.rnum.requires=IS_NOT_EMPTY()\ndb.rooms.vidurl.requires=IS_NOT_EMPTY()\ndb.kids.rno.requires=IS_IN_DB(db, db.rooms.id, \'%(rnum)s\')\n\nsession.logged=0\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/vishrut/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/home/vishrut/web2py/applications/astra2/models/db.py", line 102, in <module>\n    Field(\'img\',db.clips),\n  File "/home/vishrut/web2py/gluon/dal.py", line 6343, in __getattr__\n    return self[key]\n  File "/home/vishrut/web2py/gluon/dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'clips\'\n'
p11
s.